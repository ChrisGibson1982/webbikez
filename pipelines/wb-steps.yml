steps:
- checkout: self

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '$(serviceConnection)'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(storageAccount_RGname)'
    location: '$(location)'
    templateLocation: 'Linked artifact'
    csmFile: '$(System.DefaultWorkingDirectory)/arm/ml-template.json'
    overrideParameters: ' -storageAccount_name "$(storageAccount_name)" -storageAccountContainer_name "$(storageAccountContainer_name)"'
    deploymentMode: 'Incremental'
    deploymentName: 'storageAccountDeploy'

- task: TerraformInstaller@0
  displayName: 'install'
  inputs:
    #terraformVersion: '1.0.4'
     terraformVersion: '0.12.31'

- task: TerraformTaskV1@0
  displayName: 'validate'
  inputs:
    provider: 'azurerm'
    command: 'validate'

- task: TerraformTaskV1@0
  displayName: 'init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/tf/registry'
    backendServiceArm: '$(serviceConnection)'
    backendAzureRmResourceGroupName: '$(storageAccount_RGname)'
    backendAzureRmStorageAccountName: '$(storageAccount_name)'
    backendAzureRmContainerName: '$(storageAccountContainer_name)'
    backendAzureRmKey: 'terraform.tfstate'
  
- task: TerraformTaskV1@0
  displayName: 'plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/tf/registry'
    environmentServiceNameAzureRM: '$(serviceConnection)'
    commandOptions: '-var "prefix=$(prefix)"'
  

- task: TerraformTaskV1@0
  displayName: 'apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/tf/registry'
    environmentServiceNameAzureRM: '$(serviceConnection)'
    commandOptions: '-var "prefix=$(prefix)"'


- ${{ if eq(parameters.deployEnvironment, 'dev') }}:
  - task: Docker@2
    displayName: 'Build an image -tag $(Build.BuildId)'
    inputs:
      repository:  'webbikez'
      command: 'buildAndPush'
      Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
      #containerRegistry: $(dev_dockerRegistry)
      containerRegistry: 'Test_acr3'
      tags: '$(Build.BuildId)'


# - ${{ if eq(parameters.deployEnvironment, 'qa') }}:
#   - task: Docker@2
#     displayName: 'Build an image -tag $(Build.BuildId)'
#     inputs:
#       repository:  'webbikez'
#       command: 'buildAndPush'
#       Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
#       containerRegistry: $(qa_dockerRegistry)
#       tags: '$(Build.BuildId)'

# - ${{ if eq(parameters.deployEnvironment, 'prd') }}:
#   - task: Docker@2
#     displayName: 'Build an image -tag $(Build.BuildId)'
#     inputs:
#       repository:  'webbikez'
#       command: 'buildAndPush'
#       Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
#       containerRegistry: $(prd_dockerRegistry)
#       tags: '$(Build.BuildId)'